<launch>
  <arg name="use_t265" value="true"/>
  <arg name="use_l515" value="true"/>
  <arg name="is_hd" value="false"/>

  <include if="$(arg use_t265)" file="$(find realsense2_camera)/launch/rs_t265.launch">
        <arg name="serial_no" value="943222110188"/>
        <arg name="camera" value="t265"/>
        <arg name="unite_imu_method" value="linear_interpolation"/>
        <arg name="enable_fisheye1" value="false"/>
        <arg name="enable_fisheye2" value="false"/>
        <arg name="enable_sync" value="true"/>
        <arg name="publish_odom_tf" value="true"/>          
  </include>
  <!-- rs_t265를 실행할 때 원래  unite_imu_method 에는 값이 안들어가 있어서 아규먼트를 안넘기면 /t265/imu가 안나오는 듯  -->

  <!-- <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter_node">
        <param name="use_mag" value="false"/>
        <param name="publish_tf" value="false"/>
        <param name="world_frame" value="enu" />
        <remap from="/imu/data_raw" to="/t265/imu"/>
  </node> -->

   <include if="$(arg use_l515)" file="$(find realsense2_camera)/launch/rs_camera.launch">
        <arg name="serial_no" value="f0460650"/>
        <arg name="camera" value="l515"/>
        <arg name="align_depth" value="true"/>
        <arg name="unite_imu_method" value="linear_interpolation"/>
        <arg name="enable_gyro" value="false"/>
        <arg name="enable_accel" value="false"/>
        <arg name="filters" value="pointcloud"/>
        <arg name="color_fps" value="30"/>
        <arg name="pointcloud_texture_stream" value="RS2_STREAM_ANY"/>

        <!-- High DEF CAM -->
        <arg if="$(arg is_hd)" name="depth_width" value="1024"/>
        <arg if="$(arg is_hd)" name="depth_height" value="768"/>
        <arg if="$(arg is_hd)" name="color_width" value="1920"/>
        <arg if="$(arg is_hd)" name="color_height" value="1080"/>
        <!-- STANDARD DEF CAM --> <!-- 여기 선택됨 -->
        <arg unless="$(arg is_hd)" name="depth_width" value="640"/>
        <arg unless="$(arg is_hd)" name="depth_height" value="480"/>
        <arg unless="$(arg is_hd)" name="color_width" value="1280"/>
        <arg unless="$(arg is_hd)" name="color_height" value="720"/>
    </include>


  <node if="$(arg use_t265)" pkg="tf" type="static_transform_publisher" name="static_tf" args="0 0 0.05 0 0 0 t265_link l515_link 100" />
  <!-- <node if="$(arg use_t265)" pkg="tf" type="static_transform_publisher" name="static_tf" args="0 0 0.05 0 0 0 world map 10" />
  <node if="$(arg use_t265)" pkg="tf" type="static_transform_publisher" name="base_to_laser" args="0 0 0.05 0 0 0 base_link l515 10" /> -->

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan_node">
    <remap from="cloud_in" to="/l515/depth/color/points" />
    <!-- publish는 scan으로 다시 내보내줌 , from과 to가 헤깔리지만 from이 노드에서 서브스크라이브 함-->
  </node>


  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /> -->



  <node name="cartographer_node" pkg="cartographer_ros"
      type="cartographer_node" args="
          -configuration_directory $(find slam_cartographer)/config
          -configuration_basename summit.lua"
      output="screen">
    <!-- <remap from="scan" to="/spin_laser/scan" /> -->
    <!-- 카토그래퍼에서 원하는 것은 scan이라는 토픽인데, 센서에 맞춰서 (to 를 바꿔줘야함) -->
    <!-- 3d에서 2d로 변환함-->
    <remap from="scan" to="/scan" />
    <!-- <remap from="imu" to="/imu/data" /> -->
    <remap from="imu" to="/t265/imu" />
    <remap from="odom" to="/t265/odom/sample" />
    <!-- <remap from="points2" to="/l515/depth/color/points" /> -->
  </node>

<!-- 거북이 넣기 아직 구현안함 -->
<!-- <arg name="is_turtlesim" value="false"/> -->
<!-- 문법찾아야함 노드로 실행하는 법<include unless="$(arg is_turtlesim)" file="$(find turtlesim)/launch/rs_camera.launch"> -->


  <!-- <node name="rviz" pkg="rviz" type="rviz" required="true"
        args="-d $(find cartographer_ros)/configuration_files/summit.rviz" /> -->
  
  <!-- 맵 생성 관련 -->
  <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
      type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
</launch>
